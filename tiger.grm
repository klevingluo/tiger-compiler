%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | decs | dec | tydec | vardec | fundec | ty | tyfields 
              | lvalue | expseq | arithop | relop | boolop | recfields 
              | explist | tylist | accessor

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%left ASSIGN
%left LBRACK

%nonassoc OF
%nonassoc THEN
%nonassoc ELSE

%left AND OR

%left EQ NEQ LT LE GT GE

%left PLUS MINUS
%left TIMES DIVIDE

%nonassoc DO

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				()

decs : decs dec       ()
     |                ()

dec : tydec           ()
    | vardec          ()
    | fundec          ()

vardec : VAR ID ASSIGN exp   ()
       | VAR ID COLON ID ASSIGN exp ()

tydec : TYPE ID EQ ty     ()

ty : ID  ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID ()

tyfields: ()
        | tylist ()

tylist : tylist COMMA ID COLON ID ()
       | ID COLON ID ()

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()


exp : lvalue ()
    | NIL ()
    | LPAREN exp SEMICOLON expseq RPAREN ()
    | LPAREN RPAREN ()
    | INT  ()
    | STRING ()
    | MINUS exp ()
    | ID LPAREN RPAREN ()
    | ID LPAREN explist RPAREN ()
    | exp arithop exp %prec PLUS ()
    | exp relop exp %prec EQ ()
    | exp AND exp %prec AND ()
    | exp OR exp %prec AND ()
    | ID LBRACE recfields RBRACE ()
    | ID LBRACE RBRACE ()
    | ID LBRACK exp RBRACK OF exp ()
    | lvalue ASSIGN exp ()
    | IF exp THEN exp ()
    | IF exp THEN exp ELSE exp ()
    | WHILE exp DO exp ()
    | FOR ID ASSIGN exp TO exp DO exp ()
    | BREAK ()
    | LET decs IN expseq END ()
    | LPAREN exp RPAREN ()

lvalue: ID accessor()

accessor: DOT ID accessor ()
        | LBRACK exp RBRACK  accessor()
        | ()


arithop : PLUS ()
        | MINUS ()
        | TIMES ()
        | DIVIDE ()

arithop : EQ ()
        | NEQ ()
        | LT ()
        | LE ()
        | GT ()
        | GE ()

recfields : recfields COMMA ID EQ exp ()
          | ID EQ exp ()

expseq : expseq SEMICOLON exp ()
       | exp ()            

explist : explist COMMA exp ()
        | exp ()            

(* a[i].f[j].x.y *)
