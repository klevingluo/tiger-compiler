structure A = Absyn;
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | DECS

%nonterm  program of A.exp
        | exp of A.exp
        | decs of A.dec list
        | dec of A.dec
        | vardec of A.dec
        | ty of A.ty
        | tyfields of A.field list
        | tyfields' of A.field list
        | lvalue of A.var
        | expseq of (A.exp * int) list
        | arithop of A.oper
        | relop of A.oper
        | recfields 
        | explist of A.exp list
        | tylist 
        | tydeclist of {name:Symbol.symbol, ty:A.ty, pos:int} list
        | fundeclist of A.fundec list
        | accessor of Symbol.symbol * int -> A.var

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%left ASSIGN
%left LBRACK
%nonassoc OF
%nonassoc THEN
%nonassoc ELSE
%left AND OR
%left EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc IN

%nonassoc TYPE
%left DECS
%left FUNCTION
%nonassoc DO

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				  (exp)

decs : decs dec %prec DECS (dec::decs)
     |                     ([])

dec : tydeclist %prec DECS  (A.TypeDec(tydeclist))
    | vardec                (vardec)
    | fundeclist %prec DECS (A.FunctionDec(fundeclist))

fundeclist: fundeclist FUNCTION ID LPAREN tyfields RPAREN EQ exp %prec DECS
        ({name=Symbol.symbol(ID1),
		      params= tyfields,
		      result= NONE,
		      body= exp,
		      pos= FUNCTIONleft}::fundeclist)
      | fundeclist FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  %prec DECS
        ({name=Symbol.symbol(ID1),
            params=tyfields,
            result=(SOME(Symbol.symbol(ID2), ID2left)),
            body=exp,
            pos=FUNCTIONleft}::fundeclist)
      | FUNCTION ID LPAREN tyfields RPAREN EQ exp %prec DECS
        ({name=Symbol.symbol(ID1),
		      params= tyfields,
		      result= NONE,
		      body= exp,
		      pos= FUNCTIONleft}::[])
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  %prec DECS
        ({name=Symbol.symbol(ID1),
            params=tyfields,
            result=(SOME(Symbol.symbol(ID2), ID2left)),
            body=exp,
            pos=FUNCTIONleft}::[])

vardec : VAR ID ASSIGN exp          (A.VarDec({name=Symbol.symbol(ID),
                                               escape= ref false,
                                               typ=NONE, 
                                               init=exp,
                                               pos=VARleft}))

       | VAR ID COLON ID ASSIGN exp (A.VarDec({name=Symbol.symbol(ID1),
                                               escape= ref false,
                                               typ=SOME((Symbol.symbol(ID2), ID2left)), 
                                               init=exp,
                                               pos=VARleft}))

tydeclist : tydeclist TYPE ID EQ ty     ({name=Symbol.symbol(ID),
                                          ty=ty,
                                          pos=TYPEleft}::tydeclist)
          | TYPE ID EQ ty               ({name=Symbol.symbol(ID),
                                          ty=ty,
                                          pos=TYPEleft}::[])


ty : ID                     (A.NameTy(Symbol.symbol(ID), IDleft))
   | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
   | ARRAY OF ID            (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

tyfields:                         ([])
        | ID COLON ID tyfields'   ({name=Symbol.symbol(ID1),
                                    escape=ref false,
                                    typ=Symbol.symbol(ID2),
                                    pos=ID1left}::tyfields')

tyfields':                             ([])
         | COMMA ID COLON ID tyfields' ({name=Symbol.symbol(ID1),
                                         escape=ref false,
                                         typ=Symbol.symbol(ID2),
                                         pos=ID1left}::tyfields')


exp : lvalue                             (A.VarExp(lvalue))
    | NIL                                (A.NilExp)
    | LPAREN exp SEMICOLON exp expseq RPAREN 
             (A.SeqExp((exp1, exp1left)::((exp2, exp2left)::expseq)))
    | LPAREN RPAREN                      (A.SeqExp([]))
    | INT                                (A.IntExp(INT))
    | STRING                             (A.StringExp(STRING, STRINGleft))
    | MINUS exp                          (A.OpExp({left=A.IntExp(0),
                                                   oper=A.MinusOp,
                                                   right=exp,
                                                   pos=MINUSleft}))

    | ID LPAREN RPAREN                   (A.CallExp({func=Symbol.symbol(ID),
                                                    args=[],
                                                    pos=IDleft}))

    | ID LPAREN explist RPAREN           (A.CallExp({func=Symbol.symbol(ID),
                                                    args=explist,
                                                    pos=IDleft}))

    | exp arithop exp %prec PLUS         (A.OpExp({left=exp1,
                                                   oper=arithop,
                                                   right=exp2,
                                                   pos=exp1left}))
    | exp relop exp %prec EQ             (A.OpExp({left=exp1,
                                                   oper=relop,
                                                   right=exp2,
                                                   pos=exp1left}))

    | exp AND exp %prec AND              (A.IfExp({test=exp1,
                                                   then'=exp2,
                                                   else'=SOME(A.IntExp(0)),
                                                   pos=exp1left }))
    | exp OR exp %prec AND               (A.IfExp({test=exp1,
                                                   then'=A.IntExp(0),
                                                   else'=SOME(exp2),
                                                   pos=exp1left}))
    | ID LBRACE recfields RBRACE         (A.IntExp(3))
    | ID LBRACE RBRACE                   (A.IntExp(3)) 
    | ID LBRACK exp RBRACK OF exp        (A.IntExp(3))
    | lvalue ASSIGN exp                  (A.AssignExp({var=lvalue,
                                                       exp=exp,
                                                       pos=lvalueleft}))
    | IF exp THEN exp                    (A.IfExp({test=exp1,
                                                   then'=exp2,
                                                   else'=NONE,
                                                   pos=IFleft}))

    | IF exp THEN exp ELSE exp           (A.IfExp({test=exp1,
                                                   then'=exp2,
                                                   else'=SOME(exp2),
                                                   pos=IFleft}))

    | WHILE exp DO exp                   (A.WhileExp({test=exp1,
                                                      body=exp2,
                                                      pos=WHILEleft}))

    | FOR ID ASSIGN exp TO exp DO exp    (A.ForExp({var=Symbol.symbol(ID),
                                                    escape=ref false,
                                                    lo=exp1,
                                                    hi=exp2,
                                                    body=exp3,
                                                    pos=FORleft}))

    | BREAK                              (A.BreakExp(BREAKleft))
    | LET decs IN END                    (A.SeqExp([]))
    | LET decs IN exp expseq END         (A.LetExp({decs=decs,
                                                    body=A.SeqExp((exp, expleft) :: expseq),
                                                    pos=LETleft}))
    | LPAREN exp RPAREN                  (exp)

lvalue: ID accessor (accessor(Symbol.symbol(ID), IDleft))

accessor: DOT ID accessor             (fn (var,pos)=> A.FieldVar(
                                                            accessor(var,pos), 
                                                            Symbol.symbol(ID), 
                                                            DOTleft))

        | LBRACK exp RBRACK  accessor (fn (var,pos) => (A.SubscriptVar(
                                                                accessor(var,pos),
                                                                exp, 
                                                                LBRACKleft)))
        |                             (fn (var,pos) => A.SimpleVar(var, pos))


arithop : PLUS   (A.PlusOp)
        | MINUS  (A.MinusOp)
        | TIMES  (A.TimesOp)
        | DIVIDE (A.DivideOp)

relop : EQ  (A.EqOp)
      | NEQ (A.NeqOp)
      | LT  (A.LtOp)
      | LE  (A.LeOp)
      | GT  (A.GtOp)
      | GE  (A.GeOp)

recfields : recfields COMMA ID EQ exp ()
          | ID EQ exp ()

expseq : expseq SEMICOLON exp ((exp, expleft)::expseq)
       |                      ([])            

explist : explist COMMA exp   (exp::explist)
        | exp                 ([exp])            

(* a[i].f[j].x.y *)
