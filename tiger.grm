structure A = Absyn;
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  program of A.exp
        | exp of A.exp
        | decs 
        | dec 
        | tydec 
        | vardec 
        | fundec 
        | ty 
        | tyfields 
        | lvalue 
        | expseq of A.exp list
        | arithop of A.oper
        | relop of A.oper
        | recfields 
        | explist of A.exp list
        | tylist 
        | accessor

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%left ASSIGN
%left LBRACK
%nonassoc OF
%nonassoc THEN
%nonassoc ELSE
%left AND OR
%left EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc DO

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				()

decs : decs dec       ()
     |                ()

dec : tydec           ()
    | vardec          ()
    | fundec          ()

vardec : VAR ID ASSIGN exp   ()
       | VAR ID COLON ID ASSIGN exp ()

tydec : TYPE ID EQ ty     ()

ty : ID  ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID ()

tyfields: ()
        | tylist ()

tylist : tylist COMMA ID COLON ID ()
       | ID COLON ID ()

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()


exp : lvalue                             (A.VarExp(lvalue))
    | NIL                                (A.NilExp)
    | LPAREN exp SEMICOLON expseq RPAREN (A.SeqExp((exp, expleft)::expseq))
    | LPAREN RPAREN                      (A.SeqExp([]))
    | INT                                (A.IntExp(INT))
    | STRING                             (A.StringExp(STRING, STRINGleft))
    | MINUS exp                          (A.OpExp({left=A.IntExp(0),
                                                   oper=A.MinusOp,
                                                   right=exp,
                                                   pos=MINUSleft}))

    | ID LPAREN RPAREN                   (A.CallExp({func=Symbol.symbol(ID),
                                                    args=[],
                                                    pos=IDleft}))

    | ID LPAREN explist RPAREN           (A.CallExp({func=Symbol.symbol(ID),
                                                    args=explist,
                                                    pos=IDleft}))

    | exp arithop exp %prec PLUS         (A.OpExp({left=exp1,
                                                   oper=arithop,
                                                   right=exp2,
                                                   pos=exp1left}))
    | exp relop exp %prec EQ             (A.OpExp({left=exp1,
                                                   oper=relop,
                                                   right=exp2,
                                                   pos=exp1left}))

    | exp AND exp %prec AND              (A.IfExp({test=exp1,
                                                   then'=exp2,
                                                   else'=SOME(A.IntExp(0)),
                                                   pos=exp1left }))
    | exp OR exp %prec AND               (A.IfExp({test=exp1,
                                                   then'=A.IntExp(0),
                                                   else'=SOME(exp2),
                                                   pos=exp1left}))
    | ID LBRACE recfields RBRACE         (A.IntExp(3))
    | ID LBRACE RBRACE                   (A.IntExp(3)) 
    | ID LBRACK exp RBRACK OF exp        (A.IntExp(3))
    | lvalue ASSIGN exp                  (A.AssignExp({var=lvalue,
                                                       exp=exp,
                                                       pos=lvalueleft}))
    | IF exp THEN exp                    (A.IntExp(3))
    | IF exp THEN exp ELSE exp           (A.IntExp(3))
    | WHILE exp DO exp                   (A.WhileExp({test=exp1,
                                                      body=exp2,
                                                      pos=WHILEleft}))
    | FOR ID ASSIGN exp TO exp DO exp    (A.ForExp({var=Symbol.symbol(ID),
                                                    escape=ref false,
                                                    lo=exp1,
                                                    hi=exp2,
                                                    body=exp3,
                                                    pos=FORleft}))

    | BREAK                              (A.BreakExp(BREAKleft))
    | LET decs IN expseq END             (A.IntExp(3))
    | LPAREN exp RPAREN                  (exp)

lvalue: ID ()
      | lvalue DOT ID ()
      | lvalue LBRACK exp RBRACK ()

accessor: DOT ID accessor            (A.FieldVar(
                                                 d))
        | LBRACK exp RBRACK  accessor()
        | ()


arithop : PLUS   (A.PlusOp)
        | MINUS  (A.MinusOp)
        | TIMES  (A.TimesOp)
        | DIVIDE (A.DivideOp)

relop : EQ  (A.EqOp)
      | NEQ (A.NeqOp)
      | LT  (A.LtOp)
      | LE  (A.LeOp)
      | GT  (A.GtOp)
      | GE  (A.GeOp)

recfields : recfields COMMA ID EQ exp ()
          | ID EQ exp ()

expseq : expseq SEMICOLON exp (exp::expseq)
       | exp                  ([exp])            

explist : explist COMMA exp   (exp::explist)
        | exp                 ([exp])            

(* a[i].f[j].x.y *)
